PIXEL LAB - Entrega Final Integrador
Nombre y Apellido: 			CHRISTIAN R. HARDY
Nombre del Juego:			SALTARINA
Mecanica Intermedia seleccionada (una): SIERRIN
Mecanica Avanzada seleccionada (una): 	DISPARO

Contanos en pocas palabras como pensaste la imeplentacion de las nuevas mecanicas
Observaciones sobre la implementacion de la mecanica Intermedia:
===============================================================
Tomando como punto de partida el enemigo "pinchon" hecho en clases, le hice algunos cambios:
 * se agrego una variable (export radio_mov_x) para controlar la amplitud del movimiento horizontal de sierrin.
 * la variable radio_mov_x determina el radio de movimiento horizontal del enemigo (a futuro sera reemplazada por otra q fije solamente
   la amplitud del movimiento, y otra adicional para darle direccion al movimiento al inicio, a los efectos dar mayor control durante
   el dise単o del game)
 * Esta variable"radio_mov_x" si es igual a "0" significa que no hay limites para moverese, osea el enemigo funcionaria tal como lo que
   se hiso en clases, cambiando su direccion al detectar vacio unicamente)
 * Si la variable tiene algun valor, el enemigo se movera solamente dentro de su radio de movimiento, o sea al llegar al limite cambia
   de direccion, lo cual se hizo agragando una nueva condicion a la funcion de deteccion de colicion ("detectar_colision()") que 
   verificaria, a traves de la func limite_de_movimiento, si sierrin se encuentra dentro de su radio de movimiento horizontal. 
 * Se le agrego una se単al que detecta la colision con un proyectil (Area2D) lanzado por el player, y de inmediato se llama a la funcion
   que desactiva colicionadores de sierrin y luego llama a su funcion morir() q reproduce la animacion de morir, similar a la de volon 
   hecho en clases, y terminada esta e elimina el nodo.

Observaciones sobre la implementacion de la mecanica Intermedia:
===============================================================
Se inicia creando una variable global en el personaje player donde indicamos si pueda o no disparar, para este trabajo la ponemos en true
de entrada, aunq podriamos crear un item q al consumirlo recien pueda disparar el personaje.
en una funcion _input capturamos el cuando se presiona la tecla para disprar, tecla shoot en este trabajo.
Al presionar la tecla shoot la func input llama a la funcion shoot_control que verifica si el pj puede disparar y crea una instancia de
proyectil, le asignamos una direccion en base al atributo flip_h del personaje y una posicion de disparo para la que se utiliza un nodo position2d q anteriormente agregamos al pj.
cambiamos a false la variable puede_disparar y lanzamos el timer de enfriamiento de disparo que al finalizar vuelve a true la var anterior.
el proyectil es un area2d que al impactar con enemigo se destruye, pera ello utilizamos un se単al que detecta cuando el proyectil 
colisiona con algun elemento del grupo Enemy (ya sean cuerpos fisicos u areas).
Se agrega en cada enemigo una nueva se単al para detectar la colision del proyectil e inicia su anamicion morir y luego se elimina el nodo del arbol de escenas.
